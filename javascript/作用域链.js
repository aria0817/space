// 作用域有两种工作模型 动态作用域和静态作用域
// this关键字就是动态作用域，在执行阶段确定。
/**
 * js语言特性：
 * 词法作用域【静态作用域】，变量被创建，声明的时候就确定好了，而非执行的阶段。
 * 动态类型：执行的时候才能确定类型【后面为了消除动态类型带来的问题，出现了ts】
 */
// 1.作用域：全局、函数、块级作用域

// 2. 词法作用域
// 无论函数在哪里和如何被调用，它的词法作用域都只由函数被声明时所处的位置决定。
// foo和bar的声明在同一层级
var a = 2;
function foo(){
    console.log(a)
}
function bar(){
    var a = 3;
    foo();
}
foo()

// 欺骗词法  eval with  
/**
 * 为什么不建议使用：
 * js引擎在编译的阶段进行性能优化，有些优化依赖于能够根据代码的词法进行静态分析，预先确定给所有变量和函数的位置，才能在执行过程中快速找到标识符。
 * 如果出现了eval和with,修改了词法作用域，js引擎对标识符的位置判断都是无效的。
 */

// eval 会将代码直接放在eval所在的位置，也就是插入一段代码
// with 重复引用一个对象的多个属性的快捷方式，但是会造成创一个新的作用域

// 3. 作用域链
// 作用域是根据名称查找变量的一套规则。当一个块作用域嵌套在另一个块作用域时，就发生了作用域的嵌套，这样子形成的结构就叫做作用域链。
// 当在当前作用域中无法找到变量时，就会外层嵌套的作用域中继续查找，直到找到该变量。